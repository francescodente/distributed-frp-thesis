@startuml

interface NeighborField<T> {
  + neighborValues(): Map[DeviceId, T]
  + fold(seed: T, combine: (T, T) => T): T
  {static} + lift[A, B, C](a: NeighborField[A], b: NeighborField[B], f: (A, B) => C): NeighborField[C]
}

interface Flow<T> {
  + run(path: Seq[Slot], context: Context): Cell[Export[T]]
}

interface Export<T> {
  + root(): T
  + children(): Map[Slot, Export[Any]]
  + followPath(path: Seq[Slot]): Option[Export[Any]]
}

interface Language {
  + mid(): Flow[DeviceId]
  + constant[A](a: A): Flow[A]
  + sensor[A](id: LocalSensorId): Flow[A]
  + branch[A](cond: Flow[Boolean], th: Flow[A], el: Flow[A]): Flow[A]
  + mux[A](cond: Flow[Boolean], th: Flow[A], el: Flow[A]): Flow[A]
  + loop[A](init: A, f: Flow[A] => Flow[A]): Flow[A]
  + nbr[A](a: Flow[A]): Flow[NeighborField[A]]
  + nbrSensor[A](id: NeighborSensorId): Flow[NeighborField[A]]
  + lift[A, B, C](a: Flow[A], b: Flow[B], f: (A, B) => C): Flow[C]
}

interface NeighborState {
  + sensor[A](id: NeighborSensorId): A
  + exported(): Export[Any]
}

interface Context {
  + selfId(): DeviceId
  + neighbors(): Cell[Map[DeviceId, NeighborState]]
  + sensor[A](id: LocalSensorId): Cell[A]
}

enum Slot {
  {field} Operand(index: Int)
  {field} Condition
  {field} Then
  {field} Else
  {field} Nbr
  {field} Key[T](value: T)
}

Language ..> Flow : produces
Language .up.> NeighborField : produces
Context o-- NeighborState
Export --o NeighborState
Flow ..> Export : emits
Flow ..> Context : uses
Export o-- Slot

@enduml